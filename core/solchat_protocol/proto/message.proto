syntax = "proto3";
package solchat.message;

// Chat message with encrypted payload
// Because we're not barbarians who send plaintext across the interwebs
message ChatMessage {
  // Unique message identifier  
  string id = 1;
  
  // Sender's wallet address (32 bytes, base58 encoded)
  string sender_wallet = 2;
  
  // Recipient's wallet address (32 bytes, base58 encoded)  
  string recipient_wallet = 3;
  
  // Unix timestamp when message was created
  uint64 timestamp = 4;
  
  // Encrypted message payload
  bytes encrypted_payload = 5;
  
  // Optional attachment URL
  optional string attachment_url = 6;
  
  // Time-to-live in seconds (0 = no expiry)
  uint32 ttl = 7;
  
  // Ed25519 signature of the message content
  bytes signature = 8;
}

// Acknowledgment message for received messages
message AckMessage {
  // Unique ack identifier
  string id = 1;
  
  // Reference to the message being acknowledged
  string ref_message_id = 2;
  
  // Acknowledgment status
  AckStatus status = 3;
}

// Status codes for acknowledgments
enum AckStatus {
  UNSPECIFIED = 0;
  DELIVERED = 1;
  FAILED = 2;
  EXPIRED = 3;
  REJECTED = 4;
}

// Handshake message for client authentication
message HandshakeRequest {
  // Client's wallet address (32 bytes, base58 encoded)
  string wallet_address = 1;
  
  // Unix timestamp
  uint64 timestamp = 2;
  
  // Ed25519 signature of wallet_address + timestamp
  bytes signature = 3;
  
  // Protocol version
  string version = 4;
}

// Response to handshake request
message HandshakeResponse {
  // Whether the handshake was successful
  bool success = 1;
  
  // Error message if not successful
  optional string error = 2;
  
  // Server timestamp
  uint64 timestamp = 3;
} 

// Read receipt message for indicating a message has been read
message ReadReceipt {
  // Unique read receipt identifier
  string id = 1;
  
  // Reference to the message that was read
  string message_id = 2;
  
  // Wallet address of the user who read the message
  string reader_wallet = 3;
  
  // Unix timestamp when the message was read
  uint64 timestamp = 4;
}

// Ping message for connection keep-alive
message PingMessage {
  string id = 1;
  uint64 timestamp = 2;
  bytes data = 3;
}

// Pong message in response to a ping
message PongMessage {
  string id = 1;
  string ref_ping_id = 2;
  uint64 timestamp = 3;
  bytes data = 4;
} 