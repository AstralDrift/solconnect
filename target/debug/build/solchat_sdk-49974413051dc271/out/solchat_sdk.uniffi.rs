// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!


::uniffi::setup_scaffolding!("solchat_sdk");


/// Export info about the UDL while used to create us
/// See `uniffi_bindgen::macro_metadata` for how this is used.

// ditto for info about the UDL which spawned us.

const UNIFFI_META_CONST_UDL_SOLCHAT_SDK: ::uniffi::MetadataBuffer = ::uniffi::MetadataBuffer::from_code(::uniffi::metadata::codes::UDL_FILE)
    .concat_str("solchat_sdk")
    .concat_str("solchat_sdk")
    .concat_str("solchat_sdk");

#[doc(hidden)]
#[no_mangle]
pub static UNIFFI_META_UDL_SOLCHAT_SDK: [u8; UNIFFI_META_CONST_UDL_SOLCHAT_SDK.size] = UNIFFI_META_CONST_UDL_SOLCHAT_SDK.into_array();







// Record definitions, implemented as method-less structs, corresponding to `dictionary` objects.


// Top level functions, corresponding to UDL `namespace` functions.// Object definitions, corresponding to UDL `interface` definitions.

// For each Object definition, we assume the caller has provided an appropriately-shaped `struct T`
// with an `impl` for each method on the object. We create an `Arc<T>` for "safely" handing out
// references to these structs to foreign language code, and we provide a `pub extern "C"` function
// corresponding to each method.
//
// (Note that "safely" is in "scare quotes" - that's because we use functions on an `Arc` that
// that are inherently unsafe, but the code we generate is safe in practice.)
//
// If the caller's implementation of the struct does not match with the methods or types specified
// in the UDL, then the rust compiler will complain with a (hopefully at least somewhat helpful!)
// error message when processing this generated code.
#[::uniffi::derive_object_for_udl]
struct r#SolChatSDK { }
#[::uniffi::export_for_udl(constructor)]
impl r#SolChatSDK {
    pub fn r#new(
    ) -> std::sync::Arc<r#SolChatSDK>
    {
        unreachable!()
    }
}




// Callback Interface definitions, corresponding to UDL `callback interface` definitions.


// External and Wrapped types
// Support for external types.

// Types with an external `FfiConverter`...


// We generate support for each Custom Type and the builtin type it uses.

// Export scaffolding checksums for UDL items

#[no_mangle]
#[doc(hidden)]
pub extern "C" fn r#uniffi_solchat_sdk_checksum_constructor_solchatsdk_new() -> u16 {
    41605
}